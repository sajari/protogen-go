// Code generated by protoc-gen-go.
// source: sajari/bayes/train/train.proto
// DO NOT EDIT!

/*
Package sajari_bayes_train is a generated protocol buffer package.

It is generated from these files:
	sajari/bayes/train/train.proto

It has these top-level messages:
	Request
	ClassError
	Response
*/
package sajari_bayes_train

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request contains the name of the training set to use to train the model
// and a model name to create from the set. This allows the same training
// set to be continually modified without overwriting previously created
// models
type Request struct {
	// name of the training set to use for training
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// model to save once the training is complete
	Model string `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

// ClassError returns the number of successful and unsuccessful classifications
// for each class in the model. This is useful for determining common error
// classes, which indicates overlapping probability of neighbouring classes
type ClassError struct {
	// Expected is the known class we are expecting to see
	Expected string `protobuf:"bytes,1,opt,name=expected" json:"expected,omitempty"`
	// Got is the class we actually predicted
	Got string `protobuf:"bytes,2,opt,name=got" json:"got,omitempty"`
	// Count is the number of expected-got pairs observed
	Count uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *ClassError) Reset()                    { *m = ClassError{} }
func (m *ClassError) String() string            { return proto.CompactTextString(m) }
func (*ClassError) ProtoMessage()               {}
func (*ClassError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClassError) GetExpected() string {
	if m != nil {
		return m.Expected
	}
	return ""
}

func (m *ClassError) GetGot() string {
	if m != nil {
		return m.Got
	}
	return ""
}

func (m *ClassError) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Response contains information on a training run with regards to accuracy
type Response struct {
	// Errors contains an array of ClassError describing the training success/failure
	Errors []*ClassError `protobuf:"bytes,1,rep,name=errors" json:"errors,omitempty"`
	// Total number of correct classifications across all classes for this
	// training run
	Correct uint32 `protobuf:"varint,2,opt,name=correct" json:"correct,omitempty"`
	// Total number of incorrect classifications across all classes for this
	// training run
	Incorrect uint32 `protobuf:"varint,3,opt,name=incorrect" json:"incorrect,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetErrors() []*ClassError {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *Response) GetCorrect() uint32 {
	if m != nil {
		return m.Correct
	}
	return 0
}

func (m *Response) GetIncorrect() uint32 {
	if m != nil {
		return m.Incorrect
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "sajari.bayes.train.Request")
	proto.RegisterType((*ClassError)(nil), "sajari.bayes.train.ClassError")
	proto.RegisterType((*Response)(nil), "sajari.bayes.train.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Train service

type TrainClient interface {
	// Train takes a set of training and testing documents representing
	// a set of classes and creates a naive bayes model to represent the
	// training set. The response returns the accuracy of the model using
	// the set of testing documents. See TrainingSet for details on how
	// to create a training set.
	Train(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type trainClient struct {
	cc *grpc.ClientConn
}

func NewTrainClient(cc *grpc.ClientConn) TrainClient {
	return &trainClient{cc}
}

func (c *trainClient) Train(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/sajari.bayes.train.Train/Train", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Train service

type TrainServer interface {
	// Train takes a set of training and testing documents representing
	// a set of classes and creates a naive bayes model to represent the
	// training set. The response returns the accuracy of the model using
	// the set of testing documents. See TrainingSet for details on how
	// to create a training set.
	Train(context.Context, *Request) (*Response, error)
}

func RegisterTrainServer(s *grpc.Server, srv TrainServer) {
	s.RegisterService(&_Train_serviceDesc, srv)
}

func _Train_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.bayes.train.Train/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).Train(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Train_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.bayes.train.Train",
	HandlerType: (*TrainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Train",
			Handler:    _Train_Train_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/bayes/train/train.proto",
}

func init() { proto.RegisterFile("sajari/bayes/train/train.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x89, 0xb1, 0xff, 0x46, 0x0a, 0x32, 0x78, 0x58, 0x6a, 0x29, 0x21, 0xa7, 0x9c, 0xb6,
	0xd0, 0x82, 0x0f, 0xa0, 0x78, 0xf2, 0x22, 0x8b, 0x2f, 0xb0, 0x4d, 0x07, 0x89, 0xb4, 0xbb, 0x71,
	0x66, 0x0b, 0xea, 0xd3, 0x4b, 0x76, 0x13, 0x7b, 0xb0, 0x97, 0x65, 0xbe, 0xf9, 0xed, 0x7c, 0xdf,
	0x30, 0xb0, 0x12, 0xfb, 0x61, 0xb9, 0x59, 0xef, 0xec, 0x37, 0xc9, 0x3a, 0xb0, 0x6d, 0x5c, 0x7a,
	0x75, 0xcb, 0x3e, 0x78, 0xc4, 0xc4, 0x75, 0xe4, 0x3a, 0x92, 0x72, 0x0b, 0x13, 0x43, 0x9f, 0x27,
	0x92, 0x80, 0x08, 0xd7, 0xce, 0x1e, 0x49, 0x65, 0x45, 0x56, 0xcd, 0x4c, 0xac, 0xf1, 0x0e, 0x46,
	0x47, 0xbf, 0xa7, 0x83, 0xba, 0x8a, 0xcd, 0x24, 0xca, 0x57, 0x80, 0xa7, 0x83, 0x15, 0x79, 0x66,
	0xf6, 0x8c, 0x0b, 0x98, 0xd2, 0x57, 0x4b, 0x75, 0xa0, 0x7d, 0x3f, 0xfb, 0xa7, 0xf1, 0x16, 0xf2,
	0x77, 0x1f, 0xfa, 0xe9, 0xae, 0xec, 0x1c, 0x6b, 0x7f, 0x72, 0x41, 0xe5, 0x45, 0x56, 0xcd, 0x4d,
	0x12, 0xe5, 0x0f, 0x4c, 0x0d, 0x49, 0xeb, 0x9d, 0x10, 0x3e, 0xc0, 0x98, 0x3a, 0x63, 0x51, 0x59,
	0x91, 0x57, 0x37, 0x9b, 0x95, 0xfe, 0xbf, 0xb7, 0x3e, 0xe7, 0x9b, 0xfe, 0x37, 0x2a, 0x98, 0xd4,
	0x9e, 0x99, 0xea, 0x94, 0x37, 0x37, 0x83, 0xc4, 0x25, 0xcc, 0x1a, 0x37, 0xb0, 0x94, 0x7b, 0x6e,
	0x6c, 0x5e, 0x60, 0xf4, 0xd6, 0x79, 0xe2, 0xe3, 0x50, 0xdc, 0x5f, 0x4a, 0xec, 0xcf, 0xb4, 0x58,
	0x5e, 0x86, 0x69, 0xf9, 0xdd, 0x38, 0x9e, 0x7a, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x2f,
	0x95, 0x2d, 0x8c, 0x01, 0x00, 0x00,
}
