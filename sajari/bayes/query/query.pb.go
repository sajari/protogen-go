// Code generated by protoc-gen-go.
// source: sajari/bayes/query/query.proto
// DO NOT EDIT!

/*
Package sajari_bayes_query is a generated protocol buffer package.

It is generated from these files:
	sajari/bayes/query/query.proto

It has these top-level messages:
	Request
	Response
*/
package sajari_bayes_query

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request contains a model name and an array of string based data representing
// the content to be classified by the naive bayes model
type Request struct {
	// Model is the name of the model to be queried
	Model string `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	// Data is a list of strings representing the input query to be
	// classified. Normally these would represent words from text. It is the
	// callers responsibility to stem and tokenise into an array of strings.
	Data []string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Request) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

// Response returns information on the classification.
type Response struct {
	// Scores map represents each of the potential classes and their
	// associated probability (Note: only if the probability calculation does
	// not underflow)
	Scores map[string]float64 `protobuf:"bytes,1,rep,name=scores" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	// Best represents the highest probability class for the input data.
	Best string `protobuf:"bytes,2,opt,name=best" json:"best,omitempty"`
	// Unique indicates if this classification was the solo highest probability
	// (i.e. not equal with other classes)
	Unique bool `protobuf:"varint,3,opt,name=unique" json:"unique,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetScores() map[string]float64 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *Response) GetBest() string {
	if m != nil {
		return m.Best
	}
	return ""
}

func (m *Response) GetUnique() bool {
	if m != nil {
		return m.Unique
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "sajari.bayes.query.Request")
	proto.RegisterType((*Response)(nil), "sajari.bayes.query.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Query service

type QueryClient interface {
	// Query takes a model name and an array of strings and returns a naive bayes
	// based classification for the request data using the model specified.
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/sajari.bayes.query.Query/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Query service

type QueryServer interface {
	// Query takes a model name and an array of strings and returns a naive bayes
	// based classification for the request data using the model specified.
	Query(context.Context, *Request) (*Response, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.bayes.query.Query/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.bayes.query.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Query_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/bayes/query/query.proto",
}

func init() { proto.RegisterFile("sajari/bayes/query/query.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x50, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x25, 0xbb, 0x76, 0x6d, 0xa7, 0x17, 0x19, 0x44, 0x42, 0x15, 0x59, 0x7a, 0xca, 0x29, 0x85,
	0xf6, 0xa2, 0x9e, 0x44, 0xf0, 0xe4, 0xc9, 0xf8, 0x0b, 0xb2, 0x76, 0x0e, 0xd5, 0xba, 0xe9, 0xe6,
	0x43, 0xd8, 0xdf, 0xe5, 0x1f, 0x94, 0x9d, 0x6c, 0x41, 0x50, 0xbc, 0x84, 0xf7, 0x78, 0x93, 0x79,
	0x6f, 0x1e, 0x5c, 0x07, 0xfb, 0x66, 0xfd, 0x6e, 0xd5, 0xd8, 0x9e, 0xc2, 0xaa, 0x4b, 0xe4, 0xfb,
	0xfc, 0xea, 0x83, 0x77, 0xd1, 0x21, 0x66, 0x5d, 0xb3, 0xae, 0x59, 0x59, 0x6e, 0xe0, 0xd4, 0x50,
	0x97, 0x28, 0x44, 0x3c, 0x87, 0xc9, 0x87, 0xdb, 0xd2, 0x5e, 0x8a, 0x5a, 0xa8, 0x99, 0xc9, 0x04,
	0x11, 0x4e, 0xb6, 0x36, 0x5a, 0x59, 0xd4, 0xa5, 0x9a, 0x19, 0xc6, 0xcb, 0x2f, 0x01, 0x53, 0x43,
	0xe1, 0xe0, 0xda, 0x40, 0x78, 0x0f, 0x55, 0x78, 0x75, 0x9e, 0x82, 0x14, 0x75, 0xa9, 0xe6, 0x6b,
	0xa5, 0x7f, 0xdb, 0xe8, 0xe3, 0xb4, 0x7e, 0xe1, 0xd1, 0xc7, 0x36, 0xfa, 0xde, 0x8c, 0xff, 0x06,
	0x8b, 0x86, 0x42, 0x94, 0x05, 0xfb, 0x32, 0xc6, 0x0b, 0xa8, 0x52, 0xbb, 0xeb, 0x12, 0xc9, 0xb2,
	0x16, 0x6a, 0x6a, 0x46, 0xb6, 0xb8, 0x85, 0xf9, 0x8f, 0x15, 0x78, 0x06, 0xe5, 0x3b, 0xf5, 0x63,
	0xe2, 0x01, 0x0e, 0x57, 0x7c, 0xda, 0x7d, 0x22, 0xde, 0x26, 0x4c, 0x26, 0x77, 0xc5, 0x8d, 0x58,
	0x3f, 0xc1, 0xe4, 0x79, 0x08, 0x83, 0x0f, 0x47, 0x70, 0xf9, 0x77, 0x54, 0xae, 0x63, 0x71, 0xf5,
	0xdf, 0x1d, 0x4d, 0xc5, 0x95, 0x6e, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x61, 0x6f, 0x18, 0x0a,
	0x74, 0x01, 0x00, 0x00,
}
