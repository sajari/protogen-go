// Code generated by protoc-gen-go.
// source: sajari/engine/store/record/record.proto
// DO NOT EDIT!

/*
Package sajari_engine_store_record is a generated protocol buffer package.

It is generated from these files:
	sajari/engine/store/record/record.proto

It has these top-level messages:
	ExistsResponse
	Transform
	Record
	Records
	AddResponse
	GetResponse
	DeleteResponse
	Keys
	MutateRequest
	MutateResponse
	SetRequest
	SetResponse
	IncrementRequest
	IncrementResponse
	KeyScores
*/
package sajari_engine_store_record

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import sajari_engine "github.com/sajari/protogen-go/sajari/engine"
import sajari_engine1 "github.com/sajari/protogen-go/sajari/engine"
import sajari_rpc "github.com/sajari/protogen-go/sajari/rpc"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExistsResponse struct {
	Status []*sajari_rpc.Status `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *ExistsResponse) Reset()                    { *m = ExistsResponse{} }
func (m *ExistsResponse) String() string            { return proto.CompactTextString(m) }
func (*ExistsResponse) ProtoMessage()               {}
func (*ExistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExistsResponse) GetStatus() []*sajari_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Transform is a representation of a transform process which is applied to a record
// before it is added.
type Transform struct {
	// Identifier unique identifies a transform
	Identifier string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *Transform) Reset()                    { *m = Transform{} }
func (m *Transform) String() string            { return proto.CompactTextString(m) }
func (*Transform) ProtoMessage()               {}
func (*Transform) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Transform) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

// Record is a single record made up of key-value pairs.
type Record struct {
	// A map of key-value pairs.
	Values map[string]*sajari_engine.Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Record) GetValues() map[string]*sajari_engine.Value {
	if m != nil {
		return m.Values
	}
	return nil
}

// Records is a message which represents a list of records.
type Records struct {
	// The list of records.
	Records []*Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	// Transforms is a list of transformations to be applied to the records
	// before they are added.
	Transforms []*Transform `protobuf:"bytes,2,rep,name=transforms" json:"transforms,omitempty"`
}

func (m *Records) Reset()                    { *m = Records{} }
func (m *Records) String() string            { return proto.CompactTextString(m) }
func (*Records) ProtoMessage()               {}
func (*Records) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Records) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *Records) GetTransforms() []*Transform {
	if m != nil {
		return m.Transforms
	}
	return nil
}

// AddResponse is returned from Add.
type AddResponse struct {
	// Keys for the inserted records.
	Keys []*sajari_engine1.Key `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	// Status for each insert.
	Status []*sajari_rpc.Status `protobuf:"bytes,2,rep,name=status" json:"status,omitempty"`
}

func (m *AddResponse) Reset()                    { *m = AddResponse{} }
func (m *AddResponse) String() string            { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()               {}
func (*AddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddResponse) GetKeys() []*sajari_engine1.Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *AddResponse) GetStatus() []*sajari_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// GetResponse is returned from Get.
type GetResponse struct {
	Records []*Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	// Status for each get.
	Status []*sajari_rpc.Status `protobuf:"bytes,2,rep,name=status" json:"status,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *GetResponse) GetStatus() []*sajari_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// DeleteResponse is returned from Delete.
type DeleteResponse struct {
	Status []*sajari_rpc.Status `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteResponse) GetStatus() []*sajari_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Keys is a list of keys.
type Keys struct {
	Keys []*sajari_engine1.Key `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *Keys) Reset()                    { *m = Keys{} }
func (m *Keys) String() string            { return proto.CompactTextString(m) }
func (*Keys) ProtoMessage()               {}
func (*Keys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Keys) GetKeys() []*sajari_engine1.Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type MutateRequest struct {
	// List of record murations to apply.
	RecordMutations []*MutateRequest_RecordMutation `protobuf:"bytes,1,rep,name=record_mutations,json=recordMutations" json:"record_mutations,omitempty"`
}

func (m *MutateRequest) Reset()                    { *m = MutateRequest{} }
func (m *MutateRequest) String() string            { return proto.CompactTextString(m) }
func (*MutateRequest) ProtoMessage()               {}
func (*MutateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MutateRequest) GetRecordMutations() []*MutateRequest_RecordMutation {
	if m != nil {
		return m.RecordMutations
	}
	return nil
}

type MutateRequest_RecordMutation struct {
	// Key which uniquely identifies record.
	Key *sajari_engine1.Key `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// List of fields to mutate.
	FieldMutations []*MutateRequest_RecordMutation_FieldMutation `protobuf:"bytes,2,rep,name=field_mutations,json=fieldMutations" json:"field_mutations,omitempty"`
}

func (m *MutateRequest_RecordMutation) Reset()                    { *m = MutateRequest_RecordMutation{} }
func (m *MutateRequest_RecordMutation) String() string            { return proto.CompactTextString(m) }
func (*MutateRequest_RecordMutation) ProtoMessage()               {}
func (*MutateRequest_RecordMutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *MutateRequest_RecordMutation) GetKey() *sajari_engine1.Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MutateRequest_RecordMutation) GetFieldMutations() []*MutateRequest_RecordMutation_FieldMutation {
	if m != nil {
		return m.FieldMutations
	}
	return nil
}

// MutateField defines a mutation of a field.
type MutateRequest_RecordMutation_FieldMutation struct {
	// Field is the name of the field to mutate.
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	// Types that are valid to be assigned to Mutation:
	//	*MutateRequest_RecordMutation_FieldMutation_Set
	//	*MutateRequest_RecordMutation_FieldMutation_Increment
	//	*MutateRequest_RecordMutation_FieldMutation_Append
	Mutation isMutateRequest_RecordMutation_FieldMutation_Mutation `protobuf_oneof:"mutation"`
}

func (m *MutateRequest_RecordMutation_FieldMutation) Reset() {
	*m = MutateRequest_RecordMutation_FieldMutation{}
}
func (m *MutateRequest_RecordMutation_FieldMutation) String() string {
	return proto.CompactTextString(m)
}
func (*MutateRequest_RecordMutation_FieldMutation) ProtoMessage() {}
func (*MutateRequest_RecordMutation_FieldMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 0, 0}
}

type isMutateRequest_RecordMutation_FieldMutation_Mutation interface {
	isMutateRequest_RecordMutation_FieldMutation_Mutation()
}

type MutateRequest_RecordMutation_FieldMutation_Set struct {
	Set *sajari_engine.Value `protobuf:"bytes,2,opt,name=set,oneof"`
}
type MutateRequest_RecordMutation_FieldMutation_Increment struct {
	Increment *sajari_engine.Value `protobuf:"bytes,3,opt,name=increment,oneof"`
}
type MutateRequest_RecordMutation_FieldMutation_Append struct {
	Append *sajari_engine.Value `protobuf:"bytes,4,opt,name=append,oneof"`
}

func (*MutateRequest_RecordMutation_FieldMutation_Set) isMutateRequest_RecordMutation_FieldMutation_Mutation() {
}
func (*MutateRequest_RecordMutation_FieldMutation_Increment) isMutateRequest_RecordMutation_FieldMutation_Mutation() {
}
func (*MutateRequest_RecordMutation_FieldMutation_Append) isMutateRequest_RecordMutation_FieldMutation_Mutation() {
}

func (m *MutateRequest_RecordMutation_FieldMutation) GetMutation() isMutateRequest_RecordMutation_FieldMutation_Mutation {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *MutateRequest_RecordMutation_FieldMutation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *MutateRequest_RecordMutation_FieldMutation) GetSet() *sajari_engine.Value {
	if x, ok := m.GetMutation().(*MutateRequest_RecordMutation_FieldMutation_Set); ok {
		return x.Set
	}
	return nil
}

func (m *MutateRequest_RecordMutation_FieldMutation) GetIncrement() *sajari_engine.Value {
	if x, ok := m.GetMutation().(*MutateRequest_RecordMutation_FieldMutation_Increment); ok {
		return x.Increment
	}
	return nil
}

func (m *MutateRequest_RecordMutation_FieldMutation) GetAppend() *sajari_engine.Value {
	if x, ok := m.GetMutation().(*MutateRequest_RecordMutation_FieldMutation_Append); ok {
		return x.Append
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MutateRequest_RecordMutation_FieldMutation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MutateRequest_RecordMutation_FieldMutation_OneofMarshaler, _MutateRequest_RecordMutation_FieldMutation_OneofUnmarshaler, _MutateRequest_RecordMutation_FieldMutation_OneofSizer, []interface{}{
		(*MutateRequest_RecordMutation_FieldMutation_Set)(nil),
		(*MutateRequest_RecordMutation_FieldMutation_Increment)(nil),
		(*MutateRequest_RecordMutation_FieldMutation_Append)(nil),
	}
}

func _MutateRequest_RecordMutation_FieldMutation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MutateRequest_RecordMutation_FieldMutation)
	// mutation
	switch x := m.Mutation.(type) {
	case *MutateRequest_RecordMutation_FieldMutation_Set:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Set); err != nil {
			return err
		}
	case *MutateRequest_RecordMutation_FieldMutation_Increment:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Increment); err != nil {
			return err
		}
	case *MutateRequest_RecordMutation_FieldMutation_Append:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Append); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MutateRequest_RecordMutation_FieldMutation.Mutation has unexpected type %T", x)
	}
	return nil
}

func _MutateRequest_RecordMutation_FieldMutation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MutateRequest_RecordMutation_FieldMutation)
	switch tag {
	case 2: // mutation.set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(sajari_engine.Value)
		err := b.DecodeMessage(msg)
		m.Mutation = &MutateRequest_RecordMutation_FieldMutation_Set{msg}
		return true, err
	case 3: // mutation.increment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(sajari_engine.Value)
		err := b.DecodeMessage(msg)
		m.Mutation = &MutateRequest_RecordMutation_FieldMutation_Increment{msg}
		return true, err
	case 4: // mutation.append
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(sajari_engine.Value)
		err := b.DecodeMessage(msg)
		m.Mutation = &MutateRequest_RecordMutation_FieldMutation_Append{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MutateRequest_RecordMutation_FieldMutation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MutateRequest_RecordMutation_FieldMutation)
	// mutation
	switch x := m.Mutation.(type) {
	case *MutateRequest_RecordMutation_FieldMutation_Set:
		s := proto.Size(x.Set)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MutateRequest_RecordMutation_FieldMutation_Increment:
		s := proto.Size(x.Increment)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MutateRequest_RecordMutation_FieldMutation_Append:
		s := proto.Size(x.Append)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MutateResponse struct {
	Status []*sajari_rpc.Status `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *MutateResponse) Reset()                    { *m = MutateResponse{} }
func (m *MutateResponse) String() string            { return proto.CompactTextString(m) }
func (*MutateResponse) ProtoMessage()               {}
func (*MutateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MutateResponse) GetStatus() []*sajari_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type SetRequest struct {
	KeysScores []*KeyScores `protobuf:"bytes,1,rep,name=keys_scores,json=keysScores" json:"keys_scores,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SetRequest) GetKeysScores() []*KeyScores {
	if m != nil {
		return m.KeysScores
	}
	return nil
}

type SetResponse struct {
	Status []*sajari_rpc.Status `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *SetResponse) Reset()                    { *m = SetResponse{} }
func (m *SetResponse) String() string            { return proto.CompactTextString(m) }
func (*SetResponse) ProtoMessage()               {}
func (*SetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SetResponse) GetStatus() []*sajari_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type IncrementRequest struct {
	KeysScores []*KeyScores `protobuf:"bytes,1,rep,name=keys_scores,json=keysScores" json:"keys_scores,omitempty"`
}

func (m *IncrementRequest) Reset()                    { *m = IncrementRequest{} }
func (m *IncrementRequest) String() string            { return proto.CompactTextString(m) }
func (*IncrementRequest) ProtoMessage()               {}
func (*IncrementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IncrementRequest) GetKeysScores() []*KeyScores {
	if m != nil {
		return m.KeysScores
	}
	return nil
}

// Increment response is
type IncrementResponse struct {
	Status []*sajari_rpc.Status `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *IncrementResponse) Reset()                    { *m = IncrementResponse{} }
func (m *IncrementResponse) String() string            { return proto.CompactTextString(m) }
func (*IncrementResponse) ProtoMessage()               {}
func (*IncrementResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IncrementResponse) GetStatus() []*sajari_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type KeyScores struct {
	// Record identifier key.
	Key *sajari_engine1.Key `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Scores to update.
	Scores []*KeyScores_Score `protobuf:"bytes,2,rep,name=scores" json:"scores,omitempty"`
}

func (m *KeyScores) Reset()                    { *m = KeyScores{} }
func (m *KeyScores) String() string            { return proto.CompactTextString(m) }
func (*KeyScores) ProtoMessage()               {}
func (*KeyScores) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *KeyScores) GetKey() *sajari_engine1.Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyScores) GetScores() []*KeyScores_Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

// Score values for an array of terms.
type KeyScores_Score struct {
	// Terms to score.
	Terms []string `protobuf:"bytes,1,rep,name=terms" json:"terms,omitempty"`
	// Count of interactions (uint16).
	Count int32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	// Score for interactions.
	Score float32 `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
}

func (m *KeyScores_Score) Reset()                    { *m = KeyScores_Score{} }
func (m *KeyScores_Score) String() string            { return proto.CompactTextString(m) }
func (*KeyScores_Score) ProtoMessage()               {}
func (*KeyScores_Score) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

func (m *KeyScores_Score) GetTerms() []string {
	if m != nil {
		return m.Terms
	}
	return nil
}

func (m *KeyScores_Score) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *KeyScores_Score) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*ExistsResponse)(nil), "sajari.engine.store.record.ExistsResponse")
	proto.RegisterType((*Transform)(nil), "sajari.engine.store.record.Transform")
	proto.RegisterType((*Record)(nil), "sajari.engine.store.record.Record")
	proto.RegisterType((*Records)(nil), "sajari.engine.store.record.Records")
	proto.RegisterType((*AddResponse)(nil), "sajari.engine.store.record.AddResponse")
	proto.RegisterType((*GetResponse)(nil), "sajari.engine.store.record.GetResponse")
	proto.RegisterType((*DeleteResponse)(nil), "sajari.engine.store.record.DeleteResponse")
	proto.RegisterType((*Keys)(nil), "sajari.engine.store.record.Keys")
	proto.RegisterType((*MutateRequest)(nil), "sajari.engine.store.record.MutateRequest")
	proto.RegisterType((*MutateRequest_RecordMutation)(nil), "sajari.engine.store.record.MutateRequest.RecordMutation")
	proto.RegisterType((*MutateRequest_RecordMutation_FieldMutation)(nil), "sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation")
	proto.RegisterType((*MutateResponse)(nil), "sajari.engine.store.record.MutateResponse")
	proto.RegisterType((*SetRequest)(nil), "sajari.engine.store.record.SetRequest")
	proto.RegisterType((*SetResponse)(nil), "sajari.engine.store.record.SetResponse")
	proto.RegisterType((*IncrementRequest)(nil), "sajari.engine.store.record.IncrementRequest")
	proto.RegisterType((*IncrementResponse)(nil), "sajari.engine.store.record.IncrementResponse")
	proto.RegisterType((*KeyScores)(nil), "sajari.engine.store.record.KeyScores")
	proto.RegisterType((*KeyScores_Score)(nil), "sajari.engine.store.record.KeyScores.Score")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Store service

type StoreClient interface {
	// Add creates new records in the collection returning a key for each
	// stored record.  The key can then be used in subsequent requests to
	// get/delete/patch.
	Add(ctx context.Context, in *Records, opts ...grpc.CallOption) (*AddResponse, error)
	// Get retrieves the records corresponding to the listed keys.
	Get(ctx context.Context, in *Keys, opts ...grpc.CallOption) (*GetResponse, error)
	// Delete removes the records corresponding to the listed keys.
	Delete(ctx context.Context, in *Keys, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Mutate applies key-value updates to records corresponding to
	// keys.
	Mutate(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error)
	// Exists
	Exists(ctx context.Context, in *Keys, opts ...grpc.CallOption) (*ExistsResponse, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Add(ctx context.Context, in *Records, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := grpc.Invoke(ctx, "/sajari.engine.store.record.Store/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Get(ctx context.Context, in *Keys, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/sajari.engine.store.record.Store/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Delete(ctx context.Context, in *Keys, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/sajari.engine.store.record.Store/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Mutate(ctx context.Context, in *MutateRequest, opts ...grpc.CallOption) (*MutateResponse, error) {
	out := new(MutateResponse)
	err := grpc.Invoke(ctx, "/sajari.engine.store.record.Store/Mutate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Exists(ctx context.Context, in *Keys, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := grpc.Invoke(ctx, "/sajari.engine.store.record.Store/Exists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreServer interface {
	// Add creates new records in the collection returning a key for each
	// stored record.  The key can then be used in subsequent requests to
	// get/delete/patch.
	Add(context.Context, *Records) (*AddResponse, error)
	// Get retrieves the records corresponding to the listed keys.
	Get(context.Context, *Keys) (*GetResponse, error)
	// Delete removes the records corresponding to the listed keys.
	Delete(context.Context, *Keys) (*DeleteResponse, error)
	// Mutate applies key-value updates to records corresponding to
	// keys.
	Mutate(context.Context, *MutateRequest) (*MutateResponse, error)
	// Exists
	Exists(context.Context, *Keys) (*ExistsResponse, error)
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Records)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.engine.store.record.Store/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Add(ctx, req.(*Records))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.engine.store.record.Store/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Get(ctx, req.(*Keys))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.engine.store.record.Store/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Delete(ctx, req.(*Keys))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Mutate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Mutate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.engine.store.record.Store/Mutate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Mutate(ctx, req.(*MutateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.engine.store.record.Store/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Exists(ctx, req.(*Keys))
	}
	return interceptor(ctx, in, info, handler)
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.engine.store.record.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Store_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Store_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Store_Delete_Handler,
		},
		{
			MethodName: "Mutate",
			Handler:    _Store_Mutate_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _Store_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/engine/store/record/record.proto",
}

// Client API for Score service

type ScoreClient interface {
	// SetScores sets record-term instance pos/neg scores in the Store.
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	// IncrScores incrementally updates record-term instance pos/neg scores in the Store.
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error)
}

type scoreClient struct {
	cc *grpc.ClientConn
}

func NewScoreClient(cc *grpc.ClientConn) ScoreClient {
	return &scoreClient{cc}
}

func (c *scoreClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := grpc.Invoke(ctx, "/sajari.engine.store.record.Score/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error) {
	out := new(IncrementResponse)
	err := grpc.Invoke(ctx, "/sajari.engine.store.record.Score/Increment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Score service

type ScoreServer interface {
	// SetScores sets record-term instance pos/neg scores in the Store.
	Set(context.Context, *SetRequest) (*SetResponse, error)
	// IncrScores incrementally updates record-term instance pos/neg scores in the Store.
	Increment(context.Context, *IncrementRequest) (*IncrementResponse, error)
}

func RegisterScoreServer(s *grpc.Server, srv ScoreServer) {
	s.RegisterService(&_Score_serviceDesc, srv)
}

func _Score_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.engine.store.record.Score/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.engine.store.record.Score/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Score_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.engine.store.record.Score",
	HandlerType: (*ScoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Score_Set_Handler,
		},
		{
			MethodName: "Increment",
			Handler:    _Score_Increment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/engine/store/record/record.proto",
}

func init() { proto.RegisterFile("sajari/engine/store/record/record.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0xfe, 0xd3, 0xac, 0xd9, 0xdf, 0x53, 0xad, 0x1b, 0xd6, 0x24, 0x4a, 0x2e, 0x50, 0x15, 0x60,
	0x2b, 0x1b, 0xb8, 0x52, 0xe1, 0x62, 0xa0, 0x49, 0x68, 0xc0, 0x3a, 0xa6, 0x69, 0x02, 0x39, 0x53,
	0x2f, 0xb8, 0x99, 0x42, 0xe2, 0x42, 0xd8, 0x96, 0x14, 0xdb, 0x05, 0xfa, 0x12, 0xbc, 0x03, 0x4f,
	0x82, 0x76, 0xc9, 0x6b, 0x70, 0xcb, 0x4b, 0x20, 0xdb, 0x49, 0x96, 0x14, 0x48, 0xbb, 0x8e, 0xab,
	0xd6, 0xf6, 0xf7, 0x9d, 0xf3, 0xf9, 0xf8, 0x3b, 0x47, 0x81, 0x75, 0xee, 0xbd, 0xf7, 0x58, 0xd8,
	0xa1, 0xd1, 0xdb, 0x30, 0xa2, 0x1d, 0x2e, 0x62, 0x46, 0x3b, 0x8c, 0xfa, 0x31, 0x0b, 0x92, 0x1f,
	0x3c, 0x64, 0xb1, 0x88, 0x91, 0xad, 0x81, 0x58, 0x03, 0xb1, 0x02, 0x62, 0x8d, 0xb0, 0x6f, 0x14,
	0x83, 0x7c, 0xf4, 0x4e, 0x47, 0x54, 0xd3, 0xec, 0xeb, 0xc5, 0xa3, 0x13, 0x3a, 0x9e, 0x38, 0x60,
	0x43, 0xbf, 0xc3, 0x85, 0x27, 0x46, 0x5c, 0x1f, 0x38, 0xdb, 0xd0, 0xd8, 0xfd, 0x1c, 0x72, 0xc1,
	0x09, 0xe5, 0xc3, 0x38, 0xe2, 0x14, 0x6d, 0x80, 0xa5, 0x11, 0x4d, 0xa3, 0x65, 0xb6, 0xeb, 0x5d,
	0x84, 0x13, 0x2d, 0x6c, 0xe8, 0x63, 0x57, 0x9d, 0x90, 0x04, 0xe1, 0x6c, 0x42, 0xed, 0x88, 0x79,
	0x11, 0x1f, 0xc4, 0xec, 0x0c, 0xdd, 0x04, 0x08, 0x03, 0x1a, 0x89, 0x70, 0x10, 0x52, 0xd6, 0x34,
	0x5a, 0x46, 0xbb, 0x46, 0x72, 0x3b, 0xce, 0x57, 0x03, 0x2c, 0xa2, 0xae, 0x80, 0x7a, 0x60, 0x29,
	0xd9, 0x69, 0x0e, 0x8c, 0xff, 0x7e, 0x5f, 0xac, 0x39, 0xb8, 0xaf, 0x08, 0xbb, 0x91, 0x60, 0x63,
	0x92, 0xb0, 0xed, 0x97, 0x50, 0xcf, 0x6d, 0xa3, 0x15, 0x30, 0x4f, 0xe8, 0x38, 0x49, 0x2d, 0xff,
	0xa2, 0x0d, 0xa8, 0x2a, 0x68, 0xb3, 0xd2, 0x32, 0xda, 0xf5, 0xee, 0xea, 0x44, 0x1e, 0x45, 0x26,
	0x1a, 0xf2, 0xb8, 0xb2, 0x65, 0x38, 0x5f, 0x0c, 0x58, 0xd4, 0xf9, 0x38, 0xda, 0x86, 0x45, 0xad,
	0x20, 0x55, 0xe9, 0x4c, 0x57, 0x49, 0x52, 0x0a, 0xda, 0x05, 0x10, 0x69, 0x69, 0x78, 0xb3, 0xa2,
	0x02, 0xdc, 0x29, 0x0b, 0x90, 0x15, 0x92, 0xe4, 0x88, 0x8e, 0x07, 0xf5, 0x9d, 0x20, 0xc8, 0x1e,
	0x67, 0x0d, 0x16, 0x4e, 0xe8, 0xf8, 0xb7, 0xa7, 0x49, 0xe2, 0x1d, 0xd0, 0x31, 0x51, 0xe7, 0xb9,
	0x47, 0xac, 0x4c, 0x7d, 0xc4, 0x4f, 0x50, 0xdf, 0xa3, 0x22, 0x4b, 0x71, 0xb5, 0x6b, 0x5f, 0x26,
	0xf1, 0x36, 0x34, 0x9e, 0xd3, 0x53, 0x2a, 0xe8, 0x5c, 0xde, 0xc3, 0xb0, 0x70, 0x20, 0xaf, 0x3a,
	0x63, 0x49, 0x9c, 0x1f, 0x26, 0x2c, 0x1d, 0x8e, 0x84, 0x27, 0xd3, 0x7d, 0x18, 0x51, 0x2e, 0x90,
	0x0f, 0x2b, 0x5a, 0xf6, 0xf1, 0x99, 0xdc, 0x0f, 0xe3, 0x28, 0x8d, 0xb2, 0x55, 0x76, 0xe5, 0x42,
	0x90, 0xa4, 0x00, 0x87, 0x49, 0x00, 0xb2, 0xcc, 0x0a, 0x6b, 0x6e, 0xff, 0xac, 0x40, 0xa3, 0x88,
	0x41, 0xb7, 0x2f, 0x6c, 0xfa, 0x67, 0xc1, 0xca, 0xba, 0x31, 0x2c, 0x0f, 0x42, 0x7a, 0x9a, 0x17,
	0xa7, 0x4b, 0xda, 0x9b, 0x57, 0x1c, 0xee, 0xc9, 0x78, 0x99, 0xd4, 0xc6, 0x20, 0xbf, 0xe4, 0xf6,
	0xb9, 0x01, 0x4b, 0x05, 0x04, 0x5a, 0x85, 0xaa, 0xc2, 0x24, 0x1d, 0xa5, 0x17, 0xa8, 0x0d, 0x26,
	0xa7, 0xa2, 0xac, 0xa3, 0x5e, 0xfc, 0x47, 0x24, 0x04, 0x3d, 0x84, 0x5a, 0x18, 0xf9, 0x8c, 0x9e,
	0xd1, 0x48, 0x34, 0xcd, 0x52, 0xfc, 0x05, 0x10, 0x61, 0xb0, 0xbc, 0xe1, 0x90, 0x46, 0x41, 0x73,
	0xa1, 0x94, 0x92, 0xa0, 0x9e, 0x02, 0xfc, 0x9f, 0x96, 0x48, 0x5a, 0x2a, 0xad, 0xc0, 0x1c, 0x96,
	0x3a, 0x02, 0x70, 0x65, 0x27, 0x68, 0x7b, 0xf4, 0xa0, 0x2e, 0x8d, 0x73, 0xcc, 0xfd, 0x98, 0x65,
	0x93, 0xaa, 0xb4, 0x85, 0x0f, 0xe8, 0xd8, 0x55, 0x60, 0x02, 0x92, 0xa9, 0xff, 0x3b, 0x8f, 0xa0,
	0xee, 0xe6, 0xfa, 0xeb, 0x32, 0x82, 0x5e, 0xc3, 0xca, 0x7e, 0x5a, 0x97, 0x7f, 0x2d, 0xeb, 0x09,
	0x5c, 0xcb, 0xc5, 0x9e, 0x43, 0xdc, 0xb9, 0x01, 0xb5, 0x2c, 0xf4, 0x8c, 0xa6, 0x7e, 0x06, 0x56,
	0xa2, 0x5b, 0x7b, 0x79, 0x73, 0x26, 0xdd, 0x58, 0xfd, 0x90, 0x84, 0x6a, 0xef, 0x43, 0x55, 0x6d,
	0x48, 0x7f, 0x0a, 0x2a, 0xc7, 0xab, 0x14, 0x5b, 0x23, 0x7a, 0x21, 0x77, 0xfd, 0x78, 0x14, 0x69,
	0x87, 0x56, 0x89, 0x5e, 0xc8, 0x5d, 0x45, 0x57, 0x3e, 0xac, 0x10, 0xbd, 0xe8, 0x7e, 0x33, 0xa1,
	0xea, 0xca, 0x9c, 0xc8, 0x05, 0x73, 0x27, 0x08, 0xd0, 0xad, 0xe9, 0xc3, 0x8e, 0xdb, 0xeb, 0x65,
	0xa0, 0xfc, 0xb8, 0x7e, 0x05, 0xe6, 0x1e, 0x15, 0xa8, 0x35, 0xe5, 0x96, 0x53, 0x22, 0xe6, 0xa7,
	0x73, 0x1f, 0x2c, 0x3d, 0x33, 0x67, 0x08, 0xba, 0x51, 0x86, 0x98, 0x98, 0xbc, 0xc7, 0x60, 0xe9,
	0xc6, 0x41, 0x77, 0x67, 0x1e, 0x2f, 0xe5, 0x09, 0x26, 0xfa, 0xb0, 0x0f, 0x96, 0xfe, 0xd0, 0xb8,
	0xaa, 0xf0, 0xe2, 0xe7, 0x4a, 0xf7, 0xbb, 0x91, 0xba, 0xa1, 0x0f, 0xa6, 0x4b, 0x05, 0x5a, 0x2b,
	0x23, 0x5f, 0xb4, 0x77, 0x79, 0xc9, 0xf3, 0x0d, 0xfb, 0x0e, 0x6a, 0x59, 0xa3, 0xa0, 0x7b, 0x65,
	0xac, 0xc9, 0x5e, 0xb5, 0xef, 0xcf, 0x88, 0xd6, 0x99, 0xde, 0x58, 0xea, 0x9b, 0xec, 0xc1, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x6a, 0xa7, 0xfe, 0x27, 0x0a, 0x00, 0x00,
}
