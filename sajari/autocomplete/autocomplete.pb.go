// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sajari/autocomplete/autocomplete.proto

package autocompletepb

import (
	rpc "code.sajari.com/protogen-go/sajari/rpc"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Model is an autocomplete model.
type Model struct {
	// Name of the model.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Model) Reset()         { *m = Model{} }
func (m *Model) String() string { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()    {}
func (*Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e39947b3c0de5a4, []int{0}
}

func (m *Model) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Model.Unmarshal(m, b)
}
func (m *Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Model.Marshal(b, m, deterministic)
}
func (m *Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model.Merge(m, src)
}
func (m *Model) XXX_Size() int {
	return xxx_messageInfo_Model.Size(m)
}
func (m *Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Model proto.InternalMessageInfo

func (m *Model) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// TrainCorpusRequest is used to train the corpus to assist in detecting
// spelling mistakes.
type TrainCorpusRequest struct {
	// Model to train.
	Model *Model `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// The terms to train the corpus with. These should be correctly
	// spelt to avoid autocorrecting to misspellings.
	Terms []string `protobuf:"bytes,2,rep,name=terms,proto3" json:"terms,omitempty"`
	// Number of times to repeat the training of the terms.
	//
	// Defaults to 1 if not set.
	Repeat               int32    `protobuf:"varint,3,opt,name=repeat,proto3" json:"repeat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrainCorpusRequest) Reset()         { *m = TrainCorpusRequest{} }
func (m *TrainCorpusRequest) String() string { return proto.CompactTextString(m) }
func (*TrainCorpusRequest) ProtoMessage()    {}
func (*TrainCorpusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e39947b3c0de5a4, []int{1}
}

func (m *TrainCorpusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainCorpusRequest.Unmarshal(m, b)
}
func (m *TrainCorpusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainCorpusRequest.Marshal(b, m, deterministic)
}
func (m *TrainCorpusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainCorpusRequest.Merge(m, src)
}
func (m *TrainCorpusRequest) XXX_Size() int {
	return xxx_messageInfo_TrainCorpusRequest.Size(m)
}
func (m *TrainCorpusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainCorpusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrainCorpusRequest proto.InternalMessageInfo

func (m *TrainCorpusRequest) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *TrainCorpusRequest) GetTerms() []string {
	if m != nil {
		return m.Terms
	}
	return nil
}

func (m *TrainCorpusRequest) GetRepeat() int32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

// TrainQueryRequest is a query used to train the autocomplete
// model what is popular from a user perspective.
type TrainQueryRequest struct {
	// Model to train.
	Model *Model `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// The full query phrase.
	Phrase string `protobuf:"bytes,2,opt,name=phrase,proto3" json:"phrase,omitempty"`
	// The query phrase broken into terms. Typically this would use spaces
	// as delimiters, but it is not restricted to spaces for language flexibility.
	Terms []string `protobuf:"bytes,3,rep,name=terms,proto3" json:"terms,omitempty"`
	// Number of times to repeat the training of the query.
	//
	// Defaults to 1 if not set.
	Repeat               int32    `protobuf:"varint,4,opt,name=repeat,proto3" json:"repeat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrainQueryRequest) Reset()         { *m = TrainQueryRequest{} }
func (m *TrainQueryRequest) String() string { return proto.CompactTextString(m) }
func (*TrainQueryRequest) ProtoMessage()    {}
func (*TrainQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e39947b3c0de5a4, []int{2}
}

func (m *TrainQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainQueryRequest.Unmarshal(m, b)
}
func (m *TrainQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainQueryRequest.Marshal(b, m, deterministic)
}
func (m *TrainQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainQueryRequest.Merge(m, src)
}
func (m *TrainQueryRequest) XXX_Size() int {
	return xxx_messageInfo_TrainQueryRequest.Size(m)
}
func (m *TrainQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrainQueryRequest proto.InternalMessageInfo

func (m *TrainQueryRequest) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *TrainQueryRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *TrainQueryRequest) GetTerms() []string {
	if m != nil {
		return m.Terms
	}
	return nil
}

func (m *TrainQueryRequest) GetRepeat() int32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

// AutoCompleteRequest is a query to be autocompleted.
type AutoCompleteRequest struct {
	// Model to train.
	Model *Model `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// The phrase to be autocompleted.
	Phrase string `protobuf:"bytes,2,opt,name=phrase,proto3" json:"phrase,omitempty"`
	// The query phrase broken into terms. Typically this would use spaces
	// as delimiters, but it is not restricted to spaces for language flexibility.
	Terms                []string `protobuf:"bytes,3,rep,name=terms,proto3" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutoCompleteRequest) Reset()         { *m = AutoCompleteRequest{} }
func (m *AutoCompleteRequest) String() string { return proto.CompactTextString(m) }
func (*AutoCompleteRequest) ProtoMessage()    {}
func (*AutoCompleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e39947b3c0de5a4, []int{3}
}

func (m *AutoCompleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutoCompleteRequest.Unmarshal(m, b)
}
func (m *AutoCompleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutoCompleteRequest.Marshal(b, m, deterministic)
}
func (m *AutoCompleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoCompleteRequest.Merge(m, src)
}
func (m *AutoCompleteRequest) XXX_Size() int {
	return xxx_messageInfo_AutoCompleteRequest.Size(m)
}
func (m *AutoCompleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoCompleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AutoCompleteRequest proto.InternalMessageInfo

func (m *AutoCompleteRequest) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *AutoCompleteRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *AutoCompleteRequest) GetTerms() []string {
	if m != nil {
		return m.Terms
	}
	return nil
}

// AutoCompleteResponse is an ordered list of autocompleted phrases in response
// to an AutoCompleteRequest.
type AutoCompleteResponse struct {
	// Potential autocompletes in order of most likely to least likely.
	Phrases              []string `protobuf:"bytes,1,rep,name=phrases,proto3" json:"phrases,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutoCompleteResponse) Reset()         { *m = AutoCompleteResponse{} }
func (m *AutoCompleteResponse) String() string { return proto.CompactTextString(m) }
func (*AutoCompleteResponse) ProtoMessage()    {}
func (*AutoCompleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e39947b3c0de5a4, []int{4}
}

func (m *AutoCompleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutoCompleteResponse.Unmarshal(m, b)
}
func (m *AutoCompleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutoCompleteResponse.Marshal(b, m, deterministic)
}
func (m *AutoCompleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoCompleteResponse.Merge(m, src)
}
func (m *AutoCompleteResponse) XXX_Size() int {
	return xxx_messageInfo_AutoCompleteResponse.Size(m)
}
func (m *AutoCompleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoCompleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AutoCompleteResponse proto.InternalMessageInfo

func (m *AutoCompleteResponse) GetPhrases() []string {
	if m != nil {
		return m.Phrases
	}
	return nil
}

func init() {
	proto.RegisterType((*Model)(nil), "sajari.autocomplete.Model")
	proto.RegisterType((*TrainCorpusRequest)(nil), "sajari.autocomplete.TrainCorpusRequest")
	proto.RegisterType((*TrainQueryRequest)(nil), "sajari.autocomplete.TrainQueryRequest")
	proto.RegisterType((*AutoCompleteRequest)(nil), "sajari.autocomplete.AutoCompleteRequest")
	proto.RegisterType((*AutoCompleteResponse)(nil), "sajari.autocomplete.AutoCompleteResponse")
}

func init() {
	proto.RegisterFile("sajari/autocomplete/autocomplete.proto", fileDescriptor_1e39947b3c0de5a4)
}

var fileDescriptor_1e39947b3c0de5a4 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x55, 0xda, 0x26, 0x4f, 0xbd, 0x7d, 0x4b, 0xdd, 0xaa, 0x8a, 0xf2, 0x96, 0x2a, 0x43, 0x5f,
	0xde, 0xf0, 0x92, 0x2a, 0x0c, 0x0c, 0x48, 0x88, 0x52, 0x10, 0x62, 0x60, 0x20, 0x62, 0x62, 0x73,
	0xd3, 0xab, 0x52, 0xd4, 0xc4, 0xc6, 0x76, 0x86, 0x7e, 0x03, 0x9f, 0xc0, 0xcf, 0xa2, 0x38, 0xa9,
	0x9a, 0x0a, 0x83, 0x80, 0x81, 0x2d, 0x47, 0xf7, 0xdc, 0x73, 0x8e, 0x9d, 0x63, 0x98, 0x48, 0xfa,
	0x48, 0xc5, 0x3a, 0xa2, 0x85, 0x62, 0x29, 0xcb, 0xf8, 0x06, 0x15, 0x1e, 0x80, 0x90, 0x0b, 0xa6,
	0x18, 0x19, 0x54, 0xbc, 0xb0, 0x39, 0xf2, 0x46, 0xf5, 0xb2, 0xe0, 0x69, 0x84, 0x19, 0x57, 0xdb,
	0x8a, 0xec, 0xff, 0x01, 0xfb, 0x86, 0x2d, 0x71, 0x43, 0x08, 0x74, 0x72, 0x9a, 0xa1, 0x6b, 0x8d,
	0xad, 0xa0, 0x9b, 0xe8, 0x6f, 0x5f, 0x01, 0xb9, 0x13, 0x74, 0x9d, 0xcf, 0x99, 0xe0, 0x85, 0x4c,
	0xf0, 0xa9, 0x40, 0xa9, 0xc8, 0x14, 0xec, 0xac, 0x5c, 0xd1, 0xd4, 0x5e, 0xec, 0x85, 0x06, 0xbf,
	0x50, 0x8b, 0x26, 0x15, 0x91, 0x0c, 0xc1, 0x56, 0x28, 0x32, 0xe9, 0xb6, 0xc6, 0xed, 0xa0, 0x9b,
	0x54, 0x80, 0x8c, 0xc0, 0x11, 0xc8, 0x91, 0x2a, 0xb7, 0x3d, 0xb6, 0x02, 0x3b, 0xa9, 0x91, 0xff,
	0x6c, 0x41, 0x5f, 0xdb, 0xde, 0x16, 0x28, 0xb6, 0xdf, 0x77, 0x1d, 0x81, 0xc3, 0x1f, 0x04, 0x95,
	0xe8, 0xb6, 0xf4, 0x99, 0x6a, 0xb4, 0x4f, 0xd3, 0x36, 0xa7, 0xe9, 0x1c, 0xa4, 0x29, 0x60, 0x30,
	0x2b, 0x14, 0x9b, 0xd7, 0x16, 0x3f, 0x14, 0xc7, 0x9f, 0xc2, 0xf0, 0xd0, 0x56, 0x72, 0x96, 0x4b,
	0x24, 0x2e, 0xfc, 0xaa, 0xf6, 0xa4, 0x6b, 0x69, 0xfe, 0x0e, 0xc6, 0x5b, 0xb0, 0x67, 0xcb, 0x6c,
	0x9d, 0x93, 0x63, 0x70, 0xe6, 0x02, 0xa9, 0x42, 0xf2, 0x41, 0x2a, 0xaf, 0xbf, 0x9b, 0x09, 0x9e,
	0x86, 0x97, 0x65, 0x23, 0xca, 0xc5, 0x0b, 0x2c, 0x29, 0x5f, 0x5c, 0x8c, 0x37, 0x60, 0xeb, 0x7f,
	0x45, 0x52, 0xf8, 0xdd, 0x4c, 0x4d, 0x02, 0xa3, 0x8e, 0xe1, 0x3e, 0xbd, 0x7f, 0x9f, 0x60, 0x56,
	0x57, 0x10, 0xbf, 0x58, 0x60, 0xeb, 0x7e, 0x90, 0x6b, 0xe8, 0x35, 0xfa, 0x49, 0xfe, 0x1a, 0x35,
	0xde, 0x36, 0xd8, 0x74, 0xf6, 0x2b, 0x80, 0x7d, 0xe7, 0xc8, 0xe4, 0x7d, 0xa5, 0x66, 0x29, 0x0d,
	0x42, 0xe7, 0x67, 0xf7, 0xa7, 0x29, 0x5b, 0xe2, 0x6e, 0x90, 0xb2, 0x2c, 0xd2, 0x2f, 0x6d, 0x85,
	0xf9, 0xff, 0x15, 0x8b, 0x0c, 0x6f, 0xf8, 0xa4, 0x09, 0xf8, 0x62, 0xe1, 0x68, 0xfe, 0xd1, 0x6b,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0xd1, 0x7c, 0x68, 0xf0, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	// Create a new autocomplete model.
	Create(ctx context.Context, in *Model, opts ...grpc.CallOption) (*rpc.Empty, error)
	// Delete an existing model
	Delete(ctx context.Context, in *Model, opts ...grpc.CallOption) (*rpc.Empty, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Create(ctx context.Context, in *Model, opts ...grpc.CallOption) (*rpc.Empty, error) {
	out := new(rpc.Empty)
	err := c.cc.Invoke(ctx, "/sajari.autocomplete.Admin/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Delete(ctx context.Context, in *Model, opts ...grpc.CallOption) (*rpc.Empty, error) {
	out := new(rpc.Empty)
	err := c.cc.Invoke(ctx, "/sajari.autocomplete.Admin/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	// Create a new autocomplete model.
	Create(context.Context, *Model) (*rpc.Empty, error)
	// Delete an existing model
	Delete(context.Context, *Model) (*rpc.Empty, error)
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Admin/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Create(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Admin/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Delete(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.autocomplete.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Admin_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Admin_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/autocomplete/autocomplete.proto",
}

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Autocomplete a phrase. Potentially also fix spelling mistakes.
	AutoComplete(ctx context.Context, in *AutoCompleteRequest, opts ...grpc.CallOption) (*AutoCompleteResponse, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AutoComplete(ctx context.Context, in *AutoCompleteRequest, opts ...grpc.CallOption) (*AutoCompleteResponse, error) {
	out := new(AutoCompleteResponse)
	err := c.cc.Invoke(ctx, "/sajari.autocomplete.Query/AutoComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Autocomplete a phrase. Potentially also fix spelling mistakes.
	AutoComplete(context.Context, *AutoCompleteRequest) (*AutoCompleteResponse, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Query/AutoComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutoComplete(ctx, req.(*AutoCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.autocomplete.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoComplete",
			Handler:    _Query_AutoComplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/autocomplete/autocomplete.proto",
}

// TrainClient is the client API for Train service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrainClient interface {
	// Train the corpus (used for spell correction).
	TrainCorpus(ctx context.Context, in *TrainCorpusRequest, opts ...grpc.CallOption) (*rpc.Empty, error)
	// Train queries (used to assist with query popularity prediction).
	TrainQuery(ctx context.Context, in *TrainQueryRequest, opts ...grpc.CallOption) (*rpc.Empty, error)
}

type trainClient struct {
	cc *grpc.ClientConn
}

func NewTrainClient(cc *grpc.ClientConn) TrainClient {
	return &trainClient{cc}
}

func (c *trainClient) TrainCorpus(ctx context.Context, in *TrainCorpusRequest, opts ...grpc.CallOption) (*rpc.Empty, error) {
	out := new(rpc.Empty)
	err := c.cc.Invoke(ctx, "/sajari.autocomplete.Train/TrainCorpus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainClient) TrainQuery(ctx context.Context, in *TrainQueryRequest, opts ...grpc.CallOption) (*rpc.Empty, error) {
	out := new(rpc.Empty)
	err := c.cc.Invoke(ctx, "/sajari.autocomplete.Train/TrainQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainServer is the server API for Train service.
type TrainServer interface {
	// Train the corpus (used for spell correction).
	TrainCorpus(context.Context, *TrainCorpusRequest) (*rpc.Empty, error)
	// Train queries (used to assist with query popularity prediction).
	TrainQuery(context.Context, *TrainQueryRequest) (*rpc.Empty, error)
}

func RegisterTrainServer(s *grpc.Server, srv TrainServer) {
	s.RegisterService(&_Train_serviceDesc, srv)
}

func _Train_TrainCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).TrainCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Train/TrainCorpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).TrainCorpus(ctx, req.(*TrainCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Train_TrainQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).TrainQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Train/TrainQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).TrainQuery(ctx, req.(*TrainQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Train_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.autocomplete.Train",
	HandlerType: (*TrainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrainCorpus",
			Handler:    _Train_TrainCorpus_Handler,
		},
		{
			MethodName: "TrainQuery",
			Handler:    _Train_TrainQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/autocomplete/autocomplete.proto",
}
