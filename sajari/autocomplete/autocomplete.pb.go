// Code generated by protoc-gen-go.
// source: sajari/autocomplete/autocomplete.proto
// DO NOT EDIT!

/*
Package sajari_autocomplete is a generated protocol buffer package.

It is generated from these files:
	sajari/autocomplete/autocomplete.proto

It has these top-level messages:
	Model
	TrainCorpusRequest
	TrainQueryRequest
	AutoCompleteRequest
	AutoCompleteResponse
*/
package sajari_autocomplete

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import sajari_rpc "github.com/sajari/protogen-go/sajari/rpc"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Model is an autocomplete model.
type Model struct {
	// Name of the model.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (m *Model) String() string            { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Model) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// TrainCorpusRequest is used to train the corpus to assist in detecting
// spelling mistakes.
type TrainCorpusRequest struct {
	// Model to train.
	Model *Model `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	// The terms to train the corpus with. These should be correctly
	// spelt to avoid autocorrecting to misspellings.
	Terms []string `protobuf:"bytes,2,rep,name=terms" json:"terms,omitempty"`
	// Number of times to repeat the training of the terms.
	//
	// Defaults to 1 if not set.
	Repeat int32 `protobuf:"varint,3,opt,name=repeat" json:"repeat,omitempty"`
}

func (m *TrainCorpusRequest) Reset()                    { *m = TrainCorpusRequest{} }
func (m *TrainCorpusRequest) String() string            { return proto.CompactTextString(m) }
func (*TrainCorpusRequest) ProtoMessage()               {}
func (*TrainCorpusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TrainCorpusRequest) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *TrainCorpusRequest) GetTerms() []string {
	if m != nil {
		return m.Terms
	}
	return nil
}

func (m *TrainCorpusRequest) GetRepeat() int32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

// TrainQueryRequest is a query used to train the autocomplete
// model what is popular from a user perspective.
type TrainQueryRequest struct {
	// Model to train.
	Model *Model `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	// The full query phrase.
	Phrase string `protobuf:"bytes,2,opt,name=phrase" json:"phrase,omitempty"`
	// The query phrase broken into terms. Typically this would use spaces
	// as delimiters, but it is not restricted to spaces for language flexibility.
	Terms []string `protobuf:"bytes,3,rep,name=terms" json:"terms,omitempty"`
	// Number of times to repeat the training of the query.
	//
	// Defaults to 1 if not set.
	Repeat int32 `protobuf:"varint,4,opt,name=repeat" json:"repeat,omitempty"`
}

func (m *TrainQueryRequest) Reset()                    { *m = TrainQueryRequest{} }
func (m *TrainQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*TrainQueryRequest) ProtoMessage()               {}
func (*TrainQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TrainQueryRequest) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *TrainQueryRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *TrainQueryRequest) GetTerms() []string {
	if m != nil {
		return m.Terms
	}
	return nil
}

func (m *TrainQueryRequest) GetRepeat() int32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

// AutoCompleteRequest is a query to be autocompleted.
type AutoCompleteRequest struct {
	// Model to train.
	Model *Model `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	// The phrase to be autocompleted.
	Phrase string `protobuf:"bytes,2,opt,name=phrase" json:"phrase,omitempty"`
	// The query phrase broken into terms. Typically this would use spaces
	// as delimiters, but it is not restricted to spaces for language flexibility.
	Terms []string `protobuf:"bytes,3,rep,name=terms" json:"terms,omitempty"`
}

func (m *AutoCompleteRequest) Reset()                    { *m = AutoCompleteRequest{} }
func (m *AutoCompleteRequest) String() string            { return proto.CompactTextString(m) }
func (*AutoCompleteRequest) ProtoMessage()               {}
func (*AutoCompleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AutoCompleteRequest) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *AutoCompleteRequest) GetPhrase() string {
	if m != nil {
		return m.Phrase
	}
	return ""
}

func (m *AutoCompleteRequest) GetTerms() []string {
	if m != nil {
		return m.Terms
	}
	return nil
}

// AutoCompleteResponse is an ordered list of autocompleted phrases in response
// to an AutoCompleteRequest.
type AutoCompleteResponse struct {
	// Potential autocompletes in order of most likely to least likely.
	Phrases []string `protobuf:"bytes,1,rep,name=phrases" json:"phrases,omitempty"`
}

func (m *AutoCompleteResponse) Reset()                    { *m = AutoCompleteResponse{} }
func (m *AutoCompleteResponse) String() string            { return proto.CompactTextString(m) }
func (*AutoCompleteResponse) ProtoMessage()               {}
func (*AutoCompleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AutoCompleteResponse) GetPhrases() []string {
	if m != nil {
		return m.Phrases
	}
	return nil
}

func init() {
	proto.RegisterType((*Model)(nil), "sajari.autocomplete.Model")
	proto.RegisterType((*TrainCorpusRequest)(nil), "sajari.autocomplete.TrainCorpusRequest")
	proto.RegisterType((*TrainQueryRequest)(nil), "sajari.autocomplete.TrainQueryRequest")
	proto.RegisterType((*AutoCompleteRequest)(nil), "sajari.autocomplete.AutoCompleteRequest")
	proto.RegisterType((*AutoCompleteResponse)(nil), "sajari.autocomplete.AutoCompleteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Admin service

type AdminClient interface {
	// Create a new autocomplete model.
	Create(ctx context.Context, in *Model, opts ...grpc.CallOption) (*sajari_rpc.Empty, error)
	// Delete an existing model
	Delete(ctx context.Context, in *Model, opts ...grpc.CallOption) (*sajari_rpc.Empty, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Create(ctx context.Context, in *Model, opts ...grpc.CallOption) (*sajari_rpc.Empty, error) {
	out := new(sajari_rpc.Empty)
	err := grpc.Invoke(ctx, "/sajari.autocomplete.Admin/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Delete(ctx context.Context, in *Model, opts ...grpc.CallOption) (*sajari_rpc.Empty, error) {
	out := new(sajari_rpc.Empty)
	err := grpc.Invoke(ctx, "/sajari.autocomplete.Admin/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	// Create a new autocomplete model.
	Create(context.Context, *Model) (*sajari_rpc.Empty, error)
	// Delete an existing model
	Delete(context.Context, *Model) (*sajari_rpc.Empty, error)
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Admin/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Create(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Admin/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Delete(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.autocomplete.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Admin_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Admin_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/autocomplete/autocomplete.proto",
}

// Client API for Query service

type QueryClient interface {
	// Autocomplete a phrase. Potentially also fix spelling mistakes.
	AutoComplete(ctx context.Context, in *AutoCompleteRequest, opts ...grpc.CallOption) (*AutoCompleteResponse, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) AutoComplete(ctx context.Context, in *AutoCompleteRequest, opts ...grpc.CallOption) (*AutoCompleteResponse, error) {
	out := new(AutoCompleteResponse)
	err := grpc.Invoke(ctx, "/sajari.autocomplete.Query/AutoComplete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Query service

type QueryServer interface {
	// Autocomplete a phrase. Potentially also fix spelling mistakes.
	AutoComplete(context.Context, *AutoCompleteRequest) (*AutoCompleteResponse, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_AutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Query/AutoComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AutoComplete(ctx, req.(*AutoCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.autocomplete.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoComplete",
			Handler:    _Query_AutoComplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/autocomplete/autocomplete.proto",
}

// Client API for Train service

type TrainClient interface {
	// Train the corpus (used for spell correction).
	TrainCorpus(ctx context.Context, in *TrainCorpusRequest, opts ...grpc.CallOption) (*sajari_rpc.Empty, error)
	// Train queries (used to assist with query popularity prediction).
	TrainQuery(ctx context.Context, in *TrainQueryRequest, opts ...grpc.CallOption) (*sajari_rpc.Empty, error)
}

type trainClient struct {
	cc *grpc.ClientConn
}

func NewTrainClient(cc *grpc.ClientConn) TrainClient {
	return &trainClient{cc}
}

func (c *trainClient) TrainCorpus(ctx context.Context, in *TrainCorpusRequest, opts ...grpc.CallOption) (*sajari_rpc.Empty, error) {
	out := new(sajari_rpc.Empty)
	err := grpc.Invoke(ctx, "/sajari.autocomplete.Train/TrainCorpus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainClient) TrainQuery(ctx context.Context, in *TrainQueryRequest, opts ...grpc.CallOption) (*sajari_rpc.Empty, error) {
	out := new(sajari_rpc.Empty)
	err := grpc.Invoke(ctx, "/sajari.autocomplete.Train/TrainQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Train service

type TrainServer interface {
	// Train the corpus (used for spell correction).
	TrainCorpus(context.Context, *TrainCorpusRequest) (*sajari_rpc.Empty, error)
	// Train queries (used to assist with query popularity prediction).
	TrainQuery(context.Context, *TrainQueryRequest) (*sajari_rpc.Empty, error)
}

func RegisterTrainServer(s *grpc.Server, srv TrainServer) {
	s.RegisterService(&_Train_serviceDesc, srv)
}

func _Train_TrainCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).TrainCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Train/TrainCorpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).TrainCorpus(ctx, req.(*TrainCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Train_TrainQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainServer).TrainQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.autocomplete.Train/TrainQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainServer).TrainQuery(ctx, req.(*TrainQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Train_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.autocomplete.Train",
	HandlerType: (*TrainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrainCorpus",
			Handler:    _Train_TrainCorpus_Handler,
		},
		{
			MethodName: "TrainQuery",
			Handler:    _Train_TrainQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/autocomplete/autocomplete.proto",
}

func init() { proto.RegisterFile("sajari/autocomplete/autocomplete.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x53, 0xbf, 0x4e, 0xc2, 0x40,
	0x18, 0x4f, 0x81, 0xd6, 0xf0, 0xe1, 0xc2, 0x07, 0x21, 0x4d, 0x5d, 0x48, 0x07, 0xac, 0x4b, 0x21,
	0x75, 0x70, 0x26, 0x68, 0x8c, 0x83, 0x83, 0x8d, 0x2f, 0x70, 0x96, 0x2f, 0x11, 0x43, 0x7b, 0xe7,
	0xdd, 0x75, 0xe0, 0x19, 0x7c, 0x04, 0x5f, 0xd6, 0xf4, 0x5a, 0x42, 0x89, 0xa7, 0x51, 0x07, 0x37,
	0x7e, 0xb9, 0xdf, 0xbf, 0x3b, 0x7e, 0x85, 0x99, 0x62, 0x2f, 0x4c, 0x6e, 0xe6, 0xac, 0xd4, 0x3c,
	0xe3, 0xb9, 0xd8, 0x92, 0xa6, 0x23, 0x10, 0x0b, 0xc9, 0x35, 0xc7, 0x51, 0xcd, 0x8b, 0xdb, 0x47,
	0xc1, 0xa4, 0x11, 0x4b, 0x91, 0xcd, 0x29, 0x17, 0x7a, 0x57, 0x93, 0xc3, 0x33, 0x70, 0xef, 0xf9,
	0x9a, 0xb6, 0x88, 0xd0, 0x2b, 0x58, 0x4e, 0xbe, 0x33, 0x75, 0xa2, 0x7e, 0x6a, 0x7e, 0x87, 0x1a,
	0xf0, 0x51, 0xb2, 0x4d, 0xb1, 0xe2, 0x52, 0x94, 0x2a, 0xa5, 0xd7, 0x92, 0x94, 0xc6, 0x05, 0xb8,
	0x79, 0x25, 0x31, 0xd4, 0x41, 0x12, 0xc4, 0x96, 0xbc, 0xd8, 0x98, 0xa6, 0x35, 0x11, 0xc7, 0xe0,
	0x6a, 0x92, 0xb9, 0xf2, 0x3b, 0xd3, 0x6e, 0xd4, 0x4f, 0x6b, 0x80, 0x13, 0xf0, 0x24, 0x09, 0x62,
	0xda, 0xef, 0x4e, 0x9d, 0xc8, 0x4d, 0x1b, 0x14, 0xbe, 0x39, 0x30, 0x34, 0xb1, 0x0f, 0x25, 0xc9,
	0xdd, 0xdf, 0x53, 0x27, 0xe0, 0x89, 0x67, 0xc9, 0x14, 0xf9, 0x1d, 0x73, 0xa7, 0x06, 0x1d, 0xda,
	0x74, 0xed, 0x6d, 0x7a, 0x47, 0x6d, 0x4a, 0x18, 0x2d, 0x4b, 0xcd, 0x57, 0x4d, 0xc4, 0x3f, 0xd5,
	0x09, 0x17, 0x30, 0x3e, 0x8e, 0x55, 0x82, 0x17, 0x8a, 0xd0, 0x87, 0x93, 0x5a, 0xa7, 0x7c, 0xc7,
	0xf0, 0xf7, 0x30, 0xd9, 0x81, 0xbb, 0x5c, 0xe7, 0x9b, 0x02, 0xaf, 0xc0, 0x5b, 0x49, 0x62, 0x9a,
	0xf0, 0x9b, 0x56, 0xc1, 0x70, 0x7f, 0x26, 0x45, 0x16, 0xdf, 0x54, 0x8b, 0xa8, 0x84, 0xd7, 0x54,
	0x51, 0x7e, 0x29, 0x4c, 0xb6, 0xe0, 0x9a, 0xff, 0x0a, 0x33, 0x38, 0x6d, 0xb7, 0xc6, 0xc8, 0xea,
	0x63, 0x79, 0xcf, 0xe0, 0xe2, 0x07, 0xcc, 0xfa, 0x09, 0x92, 0x77, 0x07, 0x5c, 0xb3, 0x0f, 0xbc,
	0x83, 0x41, 0x6b, 0x9f, 0x78, 0x6e, 0xf5, 0xf8, 0xbc, 0x60, 0xdb, 0xdd, 0x6f, 0x01, 0x0e, 0x9b,
	0xc3, 0xd9, 0xd7, 0x4e, 0xed, 0x51, 0x5a, 0x8c, 0x9e, 0x3c, 0xf3, 0x5d, 0x5d, 0x7e, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xde, 0xb5, 0xdf, 0xea, 0xae, 0x03, 0x00, 0x00,
}
