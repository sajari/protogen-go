// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sajari/pipeline/v2/query.proto

package pipelinepb

import (
	v2 "code.sajari.com/protogen-go/sajari/engine/v2"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Tracking_Type int32

const (
	// No tracking.
	Tracking_NONE Tracking_Type = 0
	// Click tracking.
	//
	// A click token will be generated for each result.  Results which do not receive clicks
	// will fall down rankings, and similarly low-ranked records which receive clicks will be
	// moved up the rankings.
	Tracking_CLICK Tracking_Type = 1
	// Pos/neg tracking.
	//
	// Pos/neg tokens will be generated for each result.  Each record in the result set can be
	// marked with pos/neg value for the search.  This is then fed back into the ranking algorithm
	// to improve future results.  Unlike CLICK, if no tokens are reported for records then
	// no action is taken.
	Tracking_POS_NEG Tracking_Type = 2
)

var Tracking_Type_name = map[int32]string{
	0: "NONE",
	1: "CLICK",
	2: "POS_NEG",
}

var Tracking_Type_value = map[string]int32{
	"NONE":    0,
	"CLICK":   1,
	"POS_NEG": 2,
}

func (x Tracking_Type) String() string {
	return proto.EnumName(Tracking_Type_name, int32(x))
}

func (Tracking_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{4, 0}
}

// SearchRequest is a request to perform a search using a pipeline.
type SearchRequest struct {
	// Pipeline to run.
	Pipeline *Identifier `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Values is a mapping of key -> value which should be substituted
	// into the algorithm inputs.
	Values *_struct.Struct `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	// Tracking is the tracking configuration.
	Tracking             *Tracking `protobuf:"bytes,3,opt,name=tracking,proto3" json:"tracking,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{0}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetPipeline() *Identifier {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *SearchRequest) GetValues() *_struct.Struct {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *SearchRequest) GetTracking() *Tracking {
	if m != nil {
		return m.Tracking
	}
	return nil
}

// SearchResponse is a response to a Search call.
type SearchResponse struct {
	// Identifier of the pipeline that was run.
	Pipeline *Identifier `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Input values with updates/modifications by querying system.
	Values *_struct.Struct `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	// SearchResponse from the engine request.
	QueryResults *QueryResults `protobuf:"bytes,3,opt,name=query_results,json=queryResults,proto3" json:"query_results,omitempty"`
	// Tokens which correspond to the result records.
	Tokens               []*Token `protobuf:"bytes,4,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{1}
}

func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse.Unmarshal(m, b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return xxx_messageInfo_SearchResponse.Size(m)
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetPipeline() *Identifier {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *SearchResponse) GetValues() *_struct.Struct {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *SearchResponse) GetQueryResults() *QueryResults {
	if m != nil {
		return m.QueryResults
	}
	return nil
}

func (m *SearchResponse) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

// EvaluateRequest is a request to perform a Evaluate using a pipeline.
type EvaluateRequest struct {
	// Pipeline to run.
	Pipeline *Identifier `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Values is a mapping of key -> value which should be substituted
	// into the algorithm inputs.
	Values *_struct.Struct `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	// Key of the record to run search against.
	Key                  *v2.Key  `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvaluateRequest) Reset()         { *m = EvaluateRequest{} }
func (m *EvaluateRequest) String() string { return proto.CompactTextString(m) }
func (*EvaluateRequest) ProtoMessage()    {}
func (*EvaluateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{2}
}

func (m *EvaluateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvaluateRequest.Unmarshal(m, b)
}
func (m *EvaluateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvaluateRequest.Marshal(b, m, deterministic)
}
func (m *EvaluateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateRequest.Merge(m, src)
}
func (m *EvaluateRequest) XXX_Size() int {
	return xxx_messageInfo_EvaluateRequest.Size(m)
}
func (m *EvaluateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateRequest proto.InternalMessageInfo

func (m *EvaluateRequest) GetPipeline() *Identifier {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *EvaluateRequest) GetValues() *_struct.Struct {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *EvaluateRequest) GetKey() *v2.Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// EvaluateResponse is a response to a Evaluate call.
type EvaluateResponse struct {
	Pipeline *Identifier `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Input values with updates/modifications by querying system.
	Values *_struct.Struct `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	// QueryResults from the engine request.
	QueryResults         *QueryResults `protobuf:"bytes,3,opt,name=query_results,json=queryResults,proto3" json:"query_results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EvaluateResponse) Reset()         { *m = EvaluateResponse{} }
func (m *EvaluateResponse) String() string { return proto.CompactTextString(m) }
func (*EvaluateResponse) ProtoMessage()    {}
func (*EvaluateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{3}
}

func (m *EvaluateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvaluateResponse.Unmarshal(m, b)
}
func (m *EvaluateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvaluateResponse.Marshal(b, m, deterministic)
}
func (m *EvaluateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateResponse.Merge(m, src)
}
func (m *EvaluateResponse) XXX_Size() int {
	return xxx_messageInfo_EvaluateResponse.Size(m)
}
func (m *EvaluateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateResponse proto.InternalMessageInfo

func (m *EvaluateResponse) GetPipeline() *Identifier {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *EvaluateResponse) GetValues() *_struct.Struct {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *EvaluateResponse) GetQueryResults() *QueryResults {
	if m != nil {
		return m.QueryResults
	}
	return nil
}

type Tracking struct {
	// Tracking mode for query.
	//
	// Tracking is done using tokens which are added to result sets and identify individual results.
	// Tokens are used to improve the ranking of records by reporting clicks (i.e. positive action)
	// or pos/neg (i.e positive or negative reporting) on the position of a record in results.
	Type Tracking_Type `protobuf:"varint,1,opt,name=type,proto3,enum=sajari.pipeline.v2.Tracking_Type" json:"type,omitempty"`
	// Query ID of the query.  If this is empty, then one is generated.
	QueryId string `protobuf:"bytes,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Sequence number of query.
	Sequence int32 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Tracking field (must be unique in the collection) used to identify records in the collection.
	Field string `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
	// Custom values to be included in tracking data.
	Data                 map[string]string `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Tracking) Reset()         { *m = Tracking{} }
func (m *Tracking) String() string { return proto.CompactTextString(m) }
func (*Tracking) ProtoMessage()    {}
func (*Tracking) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{4}
}

func (m *Tracking) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tracking.Unmarshal(m, b)
}
func (m *Tracking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tracking.Marshal(b, m, deterministic)
}
func (m *Tracking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracking.Merge(m, src)
}
func (m *Tracking) XXX_Size() int {
	return xxx_messageInfo_Tracking.Size(m)
}
func (m *Tracking) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracking.DiscardUnknown(m)
}

var xxx_messageInfo_Tracking proto.InternalMessageInfo

func (m *Tracking) GetType() Tracking_Type {
	if m != nil {
		return m.Type
	}
	return Tracking_NONE
}

func (m *Tracking) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *Tracking) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Tracking) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *Tracking) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

// Tokens are used to carry ranking information for query results.
type Token struct {
	// Types that are valid to be assigned to Token:
	//	*Token_Click_
	//	*Token_PosNeg_
	Token                isToken_Token `protobuf_oneof:"token"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{5}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

type isToken_Token interface {
	isToken_Token()
}

type Token_Click_ struct {
	Click *Token_Click `protobuf:"bytes,1,opt,name=click,proto3,oneof"`
}

type Token_PosNeg_ struct {
	PosNeg *Token_PosNeg `protobuf:"bytes,2,opt,name=pos_neg,json=posNeg,proto3,oneof"`
}

func (*Token_Click_) isToken_Token() {}

func (*Token_PosNeg_) isToken_Token() {}

func (m *Token) GetToken() isToken_Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Token) GetClick() *Token_Click {
	if x, ok := m.GetToken().(*Token_Click_); ok {
		return x.Click
	}
	return nil
}

func (m *Token) GetPosNeg() *Token_PosNeg {
	if x, ok := m.GetToken().(*Token_PosNeg_); ok {
		return x.PosNeg
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Token) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Token_Click_)(nil),
		(*Token_PosNeg_)(nil),
	}
}

// Click is a token that corresponds to selecting a record from a result set.
// It is taken as an indication that this record is a good match for the
// corresponding SearchRequest.
type Token_Click struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token_Click) Reset()         { *m = Token_Click{} }
func (m *Token_Click) String() string { return proto.CompactTextString(m) }
func (*Token_Click) ProtoMessage()    {}
func (*Token_Click) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{5, 0}
}

func (m *Token_Click) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token_Click.Unmarshal(m, b)
}
func (m *Token_Click) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token_Click.Marshal(b, m, deterministic)
}
func (m *Token_Click) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token_Click.Merge(m, src)
}
func (m *Token_Click) XXX_Size() int {
	return xxx_messageInfo_Token_Click.Size(m)
}
func (m *Token_Click) XXX_DiscardUnknown() {
	xxx_messageInfo_Token_Click.DiscardUnknown(m)
}

var xxx_messageInfo_Token_Click proto.InternalMessageInfo

func (m *Token_Click) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// PosNeg is a pair of tokens which are used to mark a record as a good/bad
// result for a SearchRequest.
type Token_PosNeg struct {
	Pos                  string   `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	Neg                  string   `protobuf:"bytes,2,opt,name=neg,proto3" json:"neg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token_PosNeg) Reset()         { *m = Token_PosNeg{} }
func (m *Token_PosNeg) String() string { return proto.CompactTextString(m) }
func (*Token_PosNeg) ProtoMessage()    {}
func (*Token_PosNeg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{5, 1}
}

func (m *Token_PosNeg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token_PosNeg.Unmarshal(m, b)
}
func (m *Token_PosNeg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token_PosNeg.Marshal(b, m, deterministic)
}
func (m *Token_PosNeg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token_PosNeg.Merge(m, src)
}
func (m *Token_PosNeg) XXX_Size() int {
	return xxx_messageInfo_Token_PosNeg.Size(m)
}
func (m *Token_PosNeg) XXX_DiscardUnknown() {
	xxx_messageInfo_Token_PosNeg.DiscardUnknown(m)
}

var xxx_messageInfo_Token_PosNeg proto.InternalMessageInfo

func (m *Token_PosNeg) GetPos() string {
	if m != nil {
		return m.Pos
	}
	return ""
}

func (m *Token_PosNeg) GetNeg() string {
	if m != nil {
		return m.Neg
	}
	return ""
}

// QueryResults contains all data in response to a search request.
type QueryResults struct {
	// Number of reverse indexes read during the search request.
	Reads int64 `protobuf:"varint,1,opt,name=reads,proto3" json:"reads,omitempty"`
	// Total number of results.
	TotalResults int64 `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	// Time taken to perform query.
	Latency *duration.Duration `protobuf:"bytes,3,opt,name=latency,proto3" json:"latency,omitempty"`
	// Aggregates returned by query.
	Aggregates map[string]*v2.QueryAggregateResult `protobuf:"bytes,4,rep,name=aggregates,proto3" json:"aggregates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Aggregates run with filters.
	AggregateFilters map[string]*v2.QueryAggregateResult `protobuf:"bytes,5,rep,name=aggregate_filters,json=aggregateFilters,proto3" json:"aggregate_filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Results returned by query.
	Results              []*v2.QueryResult `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *QueryResults) Reset()         { *m = QueryResults{} }
func (m *QueryResults) String() string { return proto.CompactTextString(m) }
func (*QueryResults) ProtoMessage()    {}
func (*QueryResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_e51e78d2e99e8a0a, []int{6}
}

func (m *QueryResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResults.Unmarshal(m, b)
}
func (m *QueryResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResults.Marshal(b, m, deterministic)
}
func (m *QueryResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResults.Merge(m, src)
}
func (m *QueryResults) XXX_Size() int {
	return xxx_messageInfo_QueryResults.Size(m)
}
func (m *QueryResults) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResults.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResults proto.InternalMessageInfo

func (m *QueryResults) GetReads() int64 {
	if m != nil {
		return m.Reads
	}
	return 0
}

func (m *QueryResults) GetTotalResults() int64 {
	if m != nil {
		return m.TotalResults
	}
	return 0
}

func (m *QueryResults) GetLatency() *duration.Duration {
	if m != nil {
		return m.Latency
	}
	return nil
}

func (m *QueryResults) GetAggregates() map[string]*v2.QueryAggregateResult {
	if m != nil {
		return m.Aggregates
	}
	return nil
}

func (m *QueryResults) GetAggregateFilters() map[string]*v2.QueryAggregateResult {
	if m != nil {
		return m.AggregateFilters
	}
	return nil
}

func (m *QueryResults) GetResults() []*v2.QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterEnum("sajari.pipeline.v2.Tracking_Type", Tracking_Type_name, Tracking_Type_value)
	proto.RegisterType((*SearchRequest)(nil), "sajari.pipeline.v2.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "sajari.pipeline.v2.SearchResponse")
	proto.RegisterType((*EvaluateRequest)(nil), "sajari.pipeline.v2.EvaluateRequest")
	proto.RegisterType((*EvaluateResponse)(nil), "sajari.pipeline.v2.EvaluateResponse")
	proto.RegisterType((*Tracking)(nil), "sajari.pipeline.v2.Tracking")
	proto.RegisterMapType((map[string]string)(nil), "sajari.pipeline.v2.Tracking.DataEntry")
	proto.RegisterType((*Token)(nil), "sajari.pipeline.v2.Token")
	proto.RegisterType((*Token_Click)(nil), "sajari.pipeline.v2.Token.Click")
	proto.RegisterType((*Token_PosNeg)(nil), "sajari.pipeline.v2.Token.PosNeg")
	proto.RegisterType((*QueryResults)(nil), "sajari.pipeline.v2.QueryResults")
	proto.RegisterMapType((map[string]*v2.QueryAggregateResult)(nil), "sajari.pipeline.v2.QueryResults.AggregateFiltersEntry")
	proto.RegisterMapType((map[string]*v2.QueryAggregateResult)(nil), "sajari.pipeline.v2.QueryResults.AggregatesEntry")
}

func init() { proto.RegisterFile("sajari/pipeline/v2/query.proto", fileDescriptor_e51e78d2e99e8a0a) }

var fileDescriptor_e51e78d2e99e8a0a = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcd, 0x72, 0xe3, 0x44,
	0x10, 0x8e, 0x6c, 0xcb, 0x3f, 0x9d, 0x3f, 0x33, 0x45, 0x0a, 0x47, 0x95, 0x04, 0x47, 0xa1, 0x20,
	0x07, 0x90, 0xc1, 0x29, 0x48, 0x48, 0xb8, 0x90, 0xc4, 0x90, 0x54, 0x28, 0x27, 0x4c, 0xc2, 0x85,
	0x8b, 0x6b, 0x22, 0x8d, 0x85, 0xb0, 0xd0, 0x28, 0xd2, 0x38, 0x55, 0x7e, 0x22, 0x4e, 0x14, 0x37,
	0x1e, 0x80, 0x03, 0x2f, 0xc0, 0xc3, 0x70, 0xa5, 0x34, 0x3f, 0x8a, 0xd7, 0x56, 0xbc, 0x7b, 0xd9,
	0xdd, 0xda, 0xdb, 0xf4, 0xf4, 0xd7, 0xdd, 0x5f, 0xab, 0xbf, 0x99, 0x11, 0xec, 0xa4, 0xe4, 0x57,
	0x92, 0x04, 0x9d, 0x38, 0x88, 0x69, 0x18, 0x44, 0xb4, 0xf3, 0xd8, 0xed, 0x3c, 0x8c, 0x69, 0x32,
	0x71, 0xe2, 0x84, 0x71, 0x86, 0x90, 0xf4, 0x3b, 0xda, 0xef, 0x3c, 0x76, 0xad, 0x2d, 0x9f, 0x31,
	0x3f, 0xa4, 0x1d, 0x81, 0xb8, 0x1f, 0x0f, 0x3b, 0x29, 0x4f, 0xc6, 0x2e, 0x97, 0x11, 0xd6, 0xce,
	0xac, 0xd7, 0x1b, 0x27, 0x84, 0x07, 0x2c, 0x52, 0xfe, 0x2d, 0x55, 0x91, 0x46, 0xfe, 0x7c, 0x3d,
	0x6b, 0x7b, 0xce, 0x9b, 0x50, 0x97, 0x25, 0x9e, 0x72, 0xef, 0x16, 0xd0, 0xcd, 0xa9, 0x09, 0x88,
	0xfd, 0x97, 0x01, 0xab, 0xb7, 0x94, 0x24, 0xee, 0x2f, 0x98, 0x3e, 0x8c, 0x69, 0xca, 0xd1, 0x31,
	0xd4, 0x35, 0xa6, 0x65, 0xb4, 0x8d, 0xfd, 0xe5, 0xee, 0x8e, 0x33, 0xdf, 0x96, 0x73, 0xe9, 0xd1,
	0x88, 0x07, 0xc3, 0x80, 0x26, 0x38, 0xc7, 0xa3, 0x0e, 0x54, 0x1f, 0x49, 0x38, 0xa6, 0x69, 0xab,
	0x24, 0x22, 0x3f, 0x70, 0x64, 0x7b, 0x8e, 0x6e, 0xcf, 0xb9, 0x15, 0xcd, 0x63, 0x05, 0x43, 0x47,
	0x50, 0xe7, 0x09, 0x71, 0x47, 0x41, 0xe4, 0xb7, 0xca, 0x22, 0x64, 0xab, 0xa8, 0xd8, 0x9d, 0xc2,
	0xe0, 0x1c, 0x6d, 0xff, 0x67, 0xc0, 0x9a, 0x26, 0x9e, 0xc6, 0x2c, 0x4a, 0xe9, 0x9b, 0x65, 0xde,
	0x83, 0x55, 0x31, 0x89, 0x41, 0x42, 0xd3, 0x71, 0xc8, 0x53, 0x45, 0xbf, 0x5d, 0x54, 0xf1, 0xc7,
	0x0c, 0x88, 0x25, 0x0e, 0xaf, 0x3c, 0x4c, 0x59, 0xe8, 0x0b, 0xa8, 0x72, 0x36, 0xa2, 0x51, 0xda,
	0xaa, 0xb4, 0xcb, 0xfb, 0xcb, 0xdd, 0xcd, 0xc2, 0xf6, 0x33, 0x04, 0x56, 0x40, 0xfb, 0x77, 0x03,
	0xd6, 0x7b, 0x19, 0x0b, 0xc2, 0xe9, 0x5b, 0x19, 0xda, 0x27, 0x50, 0x1e, 0xd1, 0x89, 0x6a, 0x78,
	0x43, 0xd7, 0x91, 0x1a, 0xcc, 0xaa, 0x5c, 0xd1, 0x09, 0xce, 0x10, 0xf6, 0x3f, 0x06, 0x34, 0x9f,
	0x98, 0xbe, 0xbb, 0x53, 0xb2, 0xff, 0x28, 0x41, 0x5d, 0x6b, 0x10, 0x7d, 0x09, 0x15, 0x3e, 0x89,
	0x25, 0xf9, 0xb5, 0xee, 0xee, 0x22, 0xbd, 0x3a, 0x77, 0x93, 0x98, 0x62, 0x01, 0x47, 0x9b, 0x50,
	0x97, 0x54, 0x02, 0x4f, 0xb0, 0x6f, 0xe0, 0x9a, 0xb0, 0x2f, 0x3d, 0x64, 0x41, 0x3d, 0xcd, 0x06,
	0x19, 0xb9, 0x54, 0x10, 0x34, 0x71, 0x6e, 0xa3, 0xf7, 0xc1, 0x1c, 0x06, 0x34, 0xf4, 0x5a, 0x15,
	0x11, 0x23, 0x0d, 0x74, 0x0c, 0x15, 0x8f, 0x70, 0xd2, 0x32, 0x85, 0x68, 0x3e, 0x5e, 0xc8, 0xe1,
	0x9c, 0x70, 0xd2, 0x8b, 0x78, 0x32, 0xc1, 0x22, 0xc6, 0x3a, 0x84, 0x46, 0xbe, 0x85, 0x9a, 0x72,
	0x96, 0x86, 0x48, 0x9e, 0x2d, 0xb3, 0x82, 0xe2, 0xe3, 0x29, 0x92, 0xd2, 0x38, 0x2e, 0x1d, 0x19,
	0xf6, 0x3e, 0x54, 0xb2, 0x7e, 0x50, 0x1d, 0x2a, 0xfd, 0xeb, 0x7e, 0xaf, 0xb9, 0x84, 0x1a, 0x60,
	0x9e, 0xfd, 0x70, 0x79, 0x76, 0xd5, 0x34, 0xd0, 0x32, 0xd4, 0x6e, 0xae, 0x6f, 0x07, 0xfd, 0xde,
	0xf7, 0xcd, 0x92, 0xfd, 0xaf, 0x01, 0xa6, 0x10, 0x2d, 0x3a, 0x04, 0xd3, 0x0d, 0x03, 0x77, 0xa4,
	0x46, 0xfd, 0xe1, 0xb3, 0xf2, 0x76, 0xce, 0x32, 0xd8, 0xc5, 0x12, 0x96, 0x78, 0x74, 0x02, 0xb5,
	0x98, 0xa5, 0x83, 0x88, 0xfa, 0x6a, 0xd6, 0xed, 0xe7, 0x43, 0x6f, 0x58, 0xda, 0xa7, 0xfe, 0xc5,
	0x12, 0xae, 0xc6, 0x62, 0x65, 0x6d, 0x83, 0x29, 0xd2, 0x65, 0xcd, 0x88, 0x53, 0xa3, 0x1a, 0x94,
	0x86, 0xf5, 0x29, 0x54, 0x65, 0x48, 0xd6, 0x7e, 0xcc, 0x52, 0xdd, 0x7e, 0xcc, 0xd2, 0x6c, 0x47,
	0xd7, 0x6c, 0xe0, 0x6c, 0x79, 0x5a, 0x53, 0x39, 0xec, 0xbf, 0x2b, 0xb0, 0x32, 0x2d, 0x92, 0x2c,
	0x7b, 0x42, 0x89, 0x27, 0xe3, 0xcb, 0x58, 0x1a, 0x68, 0x0f, 0x56, 0x39, 0xe3, 0x24, 0xcc, 0x35,
	0x57, 0x12, 0xde, 0x15, 0xb1, 0xa9, 0x43, 0x0f, 0xa0, 0x16, 0x12, 0x4e, 0x23, 0x57, 0x9f, 0xa3,
	0xcd, 0x39, 0x29, 0x9f, 0xab, 0x97, 0x00, 0x6b, 0x24, 0xba, 0x01, 0x20, 0xbe, 0x9f, 0x50, 0x9f,
	0x70, 0xaa, 0x2f, 0x8c, 0xcf, 0x5f, 0x26, 0x65, 0xe7, 0xdb, 0x3c, 0x44, 0xaa, 0x60, 0x2a, 0x07,
	0x72, 0xe1, 0xbd, 0xdc, 0x1a, 0x0c, 0x83, 0x90, 0xd3, 0x24, 0x55, 0xa2, 0xfa, 0xea, 0xd5, 0x13,
	0x7f, 0x27, 0x03, 0x65, 0xfa, 0x26, 0x99, 0xd9, 0x46, 0x87, 0x50, 0xd3, 0x9f, 0xa2, 0x2a, 0x52,
	0x6f, 0xcf, 0xdf, 0x19, 0x53, 0x89, 0xb1, 0x46, 0x5b, 0x14, 0xd6, 0x67, 0xc8, 0x17, 0xe8, 0xf5,
	0x9b, 0x69, 0xbd, 0x4e, 0x9d, 0x85, 0x99, 0xdc, 0x79, 0x22, 0x55, 0xe4, 0x49, 0xd7, 0xd6, 0x08,
	0x36, 0x0a, 0x5b, 0x79, 0x1d, 0xc5, 0xba, 0x7f, 0x1a, 0x60, 0x0a, 0x0c, 0xba, 0x86, 0xaa, 0x7c,
	0xc0, 0x50, 0xe1, 0x1d, 0xf2, 0xc2, 0xab, 0x6c, 0xd9, 0x8b, 0x20, 0xea, 0x66, 0xfd, 0x09, 0xea,
	0xfa, 0xb6, 0x45, 0x7b, 0x45, 0xf8, 0x99, 0x57, 0xc3, 0xfa, 0x68, 0x31, 0x48, 0xa6, 0x3d, 0x3d,
	0xf9, 0xf9, 0x6b, 0x97, 0x79, 0x54, 0x63, 0x5d, 0xf6, 0x9b, 0xfc, 0x5b, 0xf1, 0x69, 0xf4, 0x99,
	0xcf, 0x3a, 0xf3, 0xff, 0x18, 0x27, 0x7a, 0x1d, 0xdf, 0xdf, 0x57, 0x05, 0xf4, 0xe0, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x72, 0xaf, 0xdc, 0x0a, 0x3a, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Perform a search using a pipeline.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Perform an evaluation of a search using a pipeline.
	Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateResponse, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/sajari.pipeline.v2.Query/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (*EvaluateResponse, error) {
	out := new(EvaluateResponse)
	err := c.cc.Invoke(ctx, "/sajari.pipeline.v2.Query/Evaluate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Perform a search using a pipeline.
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Perform an evaluation of a search using a pipeline.
	Evaluate(context.Context, *EvaluateRequest) (*EvaluateResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Search(ctx context.Context, req *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedQueryServer) Evaluate(ctx context.Context, req *EvaluateRequest) (*EvaluateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluate not implemented")
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.pipeline.v2.Query/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sajari.pipeline.v2.Query/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Evaluate(ctx, req.(*EvaluateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sajari.pipeline.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Query_Search_Handler,
		},
		{
			MethodName: "Evaluate",
			Handler:    _Query_Evaluate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sajari/pipeline/v2/query.proto",
}
